// Generated by gencpp from file mitya_teleop/HeadPosition.msg
// DO NOT EDIT!


#ifndef MITYA_TELEOP_MESSAGE_HEADPOSITION_H
#define MITYA_TELEOP_MESSAGE_HEADPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mitya_teleop
{
template <class ContainerAllocator>
struct HeadPosition_
{
  typedef HeadPosition_<ContainerAllocator> Type;

  HeadPosition_()
    : horizontal(0.0)
    , vertical(0.0)  {
    }
  HeadPosition_(const ContainerAllocator& _alloc)
    : horizontal(0.0)
    , vertical(0.0)  {
  (void)_alloc;
    }



   typedef float _horizontal_type;
  _horizontal_type horizontal;

   typedef float _vertical_type;
  _vertical_type vertical;




  typedef boost::shared_ptr< ::mitya_teleop::HeadPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mitya_teleop::HeadPosition_<ContainerAllocator> const> ConstPtr;

}; // struct HeadPosition_

typedef ::mitya_teleop::HeadPosition_<std::allocator<void> > HeadPosition;

typedef boost::shared_ptr< ::mitya_teleop::HeadPosition > HeadPositionPtr;
typedef boost::shared_ptr< ::mitya_teleop::HeadPosition const> HeadPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mitya_teleop::HeadPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mitya_teleop::HeadPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mitya_teleop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mitya_teleop': ['/home/dmitrydzz/dev/mitya3/ros3/src/mitya_teleop/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mitya_teleop::HeadPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mitya_teleop::HeadPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mitya_teleop::HeadPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mitya_teleop::HeadPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mitya_teleop::HeadPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mitya_teleop::HeadPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mitya_teleop::HeadPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93817796a8d7b54c196b10312493371b";
  }

  static const char* value(const ::mitya_teleop::HeadPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93817796a8d7b54cULL;
  static const uint64_t static_value2 = 0x196b10312493371bULL;
};

template<class ContainerAllocator>
struct DataType< ::mitya_teleop::HeadPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mitya_teleop/HeadPosition";
  }

  static const char* value(const ::mitya_teleop::HeadPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mitya_teleop::HeadPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 horizontal\n\
float32 vertical\n\
";
  }

  static const char* value(const ::mitya_teleop::HeadPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mitya_teleop::HeadPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.horizontal);
      stream.next(m.vertical);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeadPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mitya_teleop::HeadPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mitya_teleop::HeadPosition_<ContainerAllocator>& v)
  {
    s << indent << "horizontal: ";
    Printer<float>::stream(s, indent + "  ", v.horizontal);
    s << indent << "vertical: ";
    Printer<float>::stream(s, indent + "  ", v.vertical);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MITYA_TELEOP_MESSAGE_HEADPOSITION_H
